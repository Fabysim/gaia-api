<?php

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response;

class RightMiddleware
{
    /**
     * Example middleware invokable class
     *
     * @param Request $request PSR-7 request
     * @param RequestHandler $handler PSR-15 request handler
     *
     * @return ResponseInterface
     */
    public function __invoke(Request $request, RequestHandler $handler): ResponseInterface
    {
        //on a pas d'autorisation par défaut
        $accessGrant = false;

        //Je récupère mon token décodé
        $token = $request->getAttribute("token");

        //Je récupère le nom de la route
        $route = $request->getAttribute('route');

        $routeName = $route->getName();

        $id = (int)$route->getArgument('id');

        $id_user = $token["data"]->id_user;

        $id_role = $token["data"]->id_role;



        //on a une autorisation (min) déclarée
        if (isset($token["data"]) && $this->checkToken($token)) {
            /* if (
                $id_role == 1 || (($request->getMethod() == 'GET' && isset($id) && $id_role == 2
                    && in_array($routeName, ["products", "softwares", "users"])) || ($request->getMethod() == 'GET' && !isset($id) && $id_role == 2
                    && in_array($routeName, ["products", "softwares", "users"])) || ($request->getMethod() == 'DELETE' && isset($id) && $id_role == 2
                    && in_array($routeName, ["products", "softwares"])) || ($request->getMethod() == 'POST' && !isset($id) &&  $id_role == 2
                    && in_array($routeName, ["products", "softwares"])) || (($request->getMethod() == 'PUT' || $request->getMethod() == 'PATCH')
                    && isset($id) && $id_role == 2 && in_array($routeName, ["products", "softwares"])))
            ) {
                $accessGrant = true;
            } */
            // $id_role = 2;
            //VOIR UNIQUEMENT SON PROFIL


            if (($routeName === "users" && $request->getMethod() === 'GET' && isset($id) && $id_role == 2 && $id == $id_user)
                || $id_role === 1
            ) {
                $accessGrant = true;
            }
        }

        if ($accessGrant) {

            return $handler->handle($request);

        } else {
            $response = new Response();
            $data = array();
            $data['status'] = 'error';
            $data['message'] = 'Authorisation refusée';
            $payload = json_encode($data);

            $response->getBody()->write($payload);
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withHeader('Access-Control-Allow-Origin', '*')
                ->withHeader('Access-Control-Allow-Headers', '*')
                ->withHeader('Access-Control-Allow-Methods', '*')
                ->withStatus(403);
        }
    }


    /**
     *    Add jti token in database.
     *
     *    Token must be registered in DataBase for user
     *    Only one session per user at a time
     *
     * @param $jti string Token ID
     * @param $id_user int user who create token
     * @return bool Token is inserted in database
     */

    public static function addJti(string $jti, int $id_user): bool
    {

        $db = new MyPDO();
        $sql = "SELECT id_user FROM login WHERE
        id_user = :id_user";
        $sth = $db->prepare($sql);
        $sth->bindValue(":id_user", $id_user, PDO::PARAM_INT);
        $sth->execute();

        //have token entry
        if ($sth && $sth->rowCount() > 0) {
            $sql = "UPDATE login SET
            jti = :jti
            WHERE id_user = :id_user";
            $sth = $db->prepare($sql);
            $sth->bindValue(":id_user", $id_user, PDO::PARAM_INT);
            $sth->bindValue(":jti", $jti, PDO::PARAM_STR);
            $sth->execute();

            if ($sth && $sth->rowCount() > 0) {
                return true;

            } else {
                return false;
            }
        } //DONT have token entry
        else {
            $sql = "INSERT INTO login SET
            id_user = :id_user,
            jti = :jti";
            $sth = $db->prepare($sql);
            $sth->bindValue(":id_user", $id_user, PDO::PARAM_INT);
            $sth->bindValue(":jti", $jti, PDO::PARAM_STR);
            $sth->execute();

            if ($sth && $sth->rowCount() > 0) {
                return true;
            } else {
                return false;
            }
        }
    }


    /**
     *   Check if jti token is in database
     *
     *   Token must be registered in DataBase for user
     *    Only one session per user at a time
     *
     * @param $token array Token generated by JWT
     * @return bool Token is right for user
     */
    private function checkToken(array $token): bool
    {
        //Est-ce que l'id du token et l'id de l'utilisateur
        //est dans le token ?
        if (!isset($token["data"]->id_user, $token["jti"])) {
            return false;
        }


        //Est-ce que le token (postman) est enregistré en DB ?
        $db = new MyPDO();
        $sql = "SELECT id_user FROM login WHERE
        id_user = :id_user AND
        jti = :jti";


        $sth = $db->prepare($sql);
        $sth->bindValue(":id_user", $token["data"]->id_user, PDO::PARAM_INT);
        $sth->bindValue(":jti", $token["jti"], PDO::PARAM_STR);
        $sth->execute();

        $res = $sth->fetchAll(PDO::FETCH_ASSOC);


        //si mon token est en DB, je dis ok, true
        //sinon je dit il ya un problème, false
        if ($sth && $sth->rowCount() == 1) {
            return true;

        } else {
            return false;
        }
    }
}